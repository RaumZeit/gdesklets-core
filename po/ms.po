# Copyright (C) 2001 Free Software Foundation, Inc.
# Hasbullah Bin Pit (sebol) <sebol@ikhlas.com>, 2003.
#
msgid ""
msgstr ""
"Project-Id-Version: gdesklets\n"
"POT-Creation-Date: 2003-10-27 04:56+0800\n"
"PO-Revision-Date: 2003-10-27 04:59+0800\n"
"Last-Translator: Hasbullah Bin Pit <sebol@ikhlas.com>\n"
"Language-Team: Projek Gabai <gabai-penyumbang@lists.sourceforge.net>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: data/gdesklets.desktop.in.h:1
msgid "A desktop applet system for GNOME"
msgstr "Sistem aplet desktop bagi GNOME"

#: data/gdesklets.keys.in.h:1
msgid "gDesklets display file"
msgstr "fail paparan gDesklets"

#.
#. Class for the display configurator. It displays the configurators of the
#. sensors of a display.
#.
#: display/DisplayConfigurator.py:15
msgid "Configuration"
msgstr "Kongfigurasi"

#. close button
#. close functions
#. end for
#. use a special page when there are no config options
#: display/DisplayConfigurator.py:40
msgid "This display is not configurable."
msgstr "Paparan ini tak boleh dikonfigurasi."

#. only use the notebook when there are more than one pages
#. end if
#.
#. Reacts on closing the window.
#.
#. process any callbacks before destroying yourself
#.
#. Factory class for dynamically loaded Sensors.
#.
#. a set to remember the modules loaded so far
#. get instance of the configuration manager
#.
#. Creates and returns a Sensor of the given type or None if the Sensor
#. could not be created.
#.
#. reload old modules to force using the latest version; this
#. means we can edit modules while running gDesklets
#. a stack trace could be useful for debugging sensors
#. a stack trace could be useful for debugging sensors
#. end for
#: factory/SensorFactory.py:79
#, python-format
msgid "Could not load sensor '%(name)s'"
msgstr "Tak dapat memuatkan penderia  '%(name)s'"

#: factory/SensorFactory.py:80
msgid "An error occurred while loading a sensor. This most likely means that the sensor is broken or simply not installed."
msgstr "Ralat berlaku semasa memuat penderia. Mungkin bermaksud penderia rosak atau tak dipasang."

#.
#. Class for creating Displays from XML data.
#.
#.
#. Parses the given XML data and returns a new Display object.
#.
#. parse display data
#. abort if an parse error occurred
#. add the sensors
#. add the DefaultSensor
#. we don't wanna override watch settings from the .display
#. add the children and configure
#. a stack trace could be useful for debugging
#. make the corrupt display visible so that the user can
#. remove it
#: factory/DisplayFactory.py:93
msgid "Error while configuring display"
msgstr "Ralat bila mengkonfigurasikan paparan"

#: factory/DisplayFactory.py:94
msgid "A display could not be configured properly. It will most likely be broken and you should consider removing it."
msgstr "Paparan tak dapat dikonfigurasikan dengan betul. Ianya mungkin telah rosak dan anda patut mempertimbangkan untuk membuangnya."

#.
#. Creates a TargetSettings object from the given Attributes object.
#.
#. ignore the <meta> tag for now
#. if there is no ID given, guess a unique one
#. remember everything for later
#. nesting errors in XML are detected by the SAX parser; if we get
#. here, it means our parser is buggy, not the XML input
#.
#. Class for parsing command line arguments.
#.
#.
#. Parses the given list of command line arguments. This is usually
#. sys.argv[1:].
#.
#. end for
#. load displays
#: main/CmdLineParser.py:51
msgid "Could not add display"
msgstr "Tak dapat menambah paparan"

#: main/CmdLineParser.py:52
msgid "The display could not be added because the file does not exist."
msgstr "Paparan tak dapat ditambah kerana fail itu tidak wujud."

#. end for
#. end if
#. This class starts, restarts and kills Displays
#. the set of open displays as a hashtable "id -> display"
#. watches main/displays in the configuration base and calls on_watch if
#. something's changed
#. gets current displays from the configuration base
#. check whether there are already some displays; if there aren't any
#. welcome new users
#.
#. Welcomes new users and sets up the configuration base.
#.
#: main/Starter.py:46
#, python-format
msgid "Welcome to %(name)s<i>!</i>"
msgstr "Selamat Datang ke %(name)s<i>!</i>"

#: main/Starter.py:47
#, python-format
msgid ""
"It looks like you are running %(name)s for the first time.\n"
"\n"
"You can add new displays by launching them in your file manager.\n"
"\n"
"<b>Have fun,</b>\n"
"  <i>the %(name)s developers</i>"
msgstr ""
"Nampaknya anda melaksanakan %(name)s buat pertama kali.\n"
"\n"
"Anda boleh menambah paparan dengan melancarkannya pada pengurus fail nanda.\n"
"\n"
"<b>Selamat berbahagia,</b>\n"
"  <i>Pembangun %(name)s </i>"

#.
#. Reacts on observer messages from the display.
#.
#. end if
#.
#. Reacts on changes in the list of displays.
#.
#. check whether displays have been added
#. end for
#. check whether displays have been removed
#. end for
#.
#. Adds the given display.
#.
#. end if
#.
#. Creates and returns a new display from the given data, or None in case
#. of an error.
#.
#: main/Starter.py:128
#, python-format
msgid "Could not open display file '%(path)s'"
msgstr "Tak dapat membuka fail paparan '%(path)s'"

#: main/Starter.py:130
msgid "The display file could not be opened because the file was not readable."
msgstr "Fail paparan tak dapat dibuka kerana fail tidak boleh dibaca."

#: main/Starter.py:145
#, python-format
msgid "Invalid display file '%(path)s'"
msgstr "Fail paparan '%(path)s' tidak sah"

#: main/Starter.py:146
msgid "The display file contains invalid data and could not be loaded."
msgstr "Fail paparan mengandungi data tidak sah dan tak dapat dimuatkan."

#.
#. Removes the given display.
#.
#.
#. Purges unused config entries.
#.
#. TODO: implement it in a more efficient way
#.
#. end for
#. get paths to purge
#. relative paths are relative to USERHOME
#. make sure that only paths below USERHOME can be purged
#. end for
#. end for
#.
#. Starts up all displays.
#.
#.
#. Abstract class for all Sensors. Every Sensor has to inherit from this class.
#.
#. the path of this sensor
#. configuration manager for sensor properties
#. the ID of this sensor
#. the configuration watcher callback
#. flag for stopping the sensor
#. converter for data types
#.
#. Reacts on changes in the configuration and delegates the call to the
#. user's callback.
#.
#.
#. Sets the ID of this sensor.
#.
#.
#. Returns the ID of this sensor. The ID is not yet valid in the
#. constructor.
#.
#.
#. Returns the path of this sensor.
#.
#.
#. Returns a new empty TargetSettings object.
#.
#.
#. Sends the given TargetSettings object to the Display.
#.
#.
#. Adds a timeout function with the given interval in ms.
#. The callback function must return TRUE in order to be called again.
#.
#.
#. Adds and runs a new thread.
#.
#. the thread should not start before setup is complete, therefore
#. we are using the GTK idle handler
#.
#. Sends an action to this sensor.
#.
#.
#. Method for handling action calls from the display. Sensors have to
#. override this method.
#.
#.
#. Stops this sensor and cleans up.
#.
#. shut down sensor
#.
#. Returns whether this sensor is stopped. Use this method to check if your
#. threads have to terminate.
#.
#.
#. Executes tasks for sensor shutdown. Sensors may override this method.
#.
#.
#. Sets the configuration id for this sensor. If the user has set a callback
#. function for watching the config, the config will be watched.
#.
#.
#. Returns the unique config ID of this sensor.
#.
#.
#. Registers a watcher for config changes.
#.
#.
#. Sets the data types to be used for the configuration values.
#.
#.
#. Sets the paths to remove when the config gets purged.
#.
#.
#. Creates and returns an empty new sensor configurator.
#.
#.
#. Returns the configurator of this sensor.
#.
#.
#. Method for duplicating the display using this sensor
#.
#.
#. Opens the given menu.
#.
#: sensor/Sensor.py:295
msgid "_Configure display"
msgstr "_Konfigurasi paparan"

#: sensor/Sensor.py:296
msgid "Re_start display"
msgstr "Ulang_hidup paparan"

#: sensor/Sensor.py:297
msgid "_Remove display"
msgstr "_Buang paparan"

#: sensor/Sensor.py:299
msgid "_About"
msgstr "_Perihal"

#: sensor/Sensor.py:301
msgid "_Quit"
msgstr "_Keluar"

#: sensor/Sensor.py:333
msgid "translator_credits"
msgstr "Hasbullah Bin Pit <sebol@ikhlas.com>"

#. set the icon
#.
#. FontSelector sensor by Psi (psiz _at_ free _dot_ fr)
#. Adopted and modified by Martin Grimme.
#.
#. the number of fonts
#. the font settings
#. the color settings
#. setup configuration entries
#. end for
#.
#. Font init
#.
#. end if
#: Sensors/FontSelector/__init__.py:86
msgid "Fonts"
msgstr "Font"

#: Sensors/FontSelector/__init__.py:87
msgid "Fonts settings"
msgstr "Tetapan Font"

#: Sensors/FontSelector/__init__.py:90
#, python-format
msgid "Font #%i:"
msgstr "Font #%i:"

#: Sensors/FontSelector/__init__.py:92
#, python-format
msgid "Font #%i used in the labels"
msgstr "Font #%i digunakan pada label"

#: Sensors/FontSelector/__init__.py:93
#, python-format
msgid "Font color #%i:"
msgstr "Warna font #%i:"

#: Sensors/FontSelector/__init__.py:95
#, python-format
msgid "Font color #%i used in the labels"
msgstr "Warna font #%i digunakan pada label"

