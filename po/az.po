# gdesklets.HEAD.po faylının Azərbaycan Dilinə tərcüməsi
# gdesklets.HEAD.po faylının Azərbaycan dilinə tərcüməsi
# This file is distributed under the same license as the PACKAGE package.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# Mətin Əmirov <metin@karegen.com>, 2003
#
msgid ""
msgstr ""
"Project-Id-Version: gdesklets.HEAD\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2003-10-01 19:42+0200\n"
"PO-Revision-Date: 2003-10-09 19:28+0300\n"
"Last-Translator: Mətin Əmirov <metin@karegen.com>\n"
"Language-Team: Azərbaycan Dili <gnome@azətt.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.0.1\n"

#: data/gdesklets.desktop.in.h:1
msgid "A desktop applet system for GNOME"
msgstr "GNOME üçün masa üstü applet sistemi"

#: data/gdesklets.keys.in.h:1
msgid "gDesklets display file"
msgstr "gDesklets displey faylı"

#.
#. Factory class for dynamically loaded Sensors.
#.
#. a set to remember the modules loaded so far
#. get instance of the configuration manager
#.
#. Creates and returns a Sensor of the given type or None if the Sensor
#. could not be created.
#.
#. FIXME: I think the GConf key main/sensorpaths is obsolete now.
#. Do we still need to read it?
#. SUGGESTION: We could check the sensorspath whether a sensor is
#. available or not. That way, if somebody removes a directory,
#. we can make sure that it isn't loaded.
#. reload old modules to force using the latest version; this
#. means we can edit modules while running gDesklets
#. a stack trace could be useful for debugging sensors
#. a stack trace could be useful for debugging sensors
#. end for
#: factory/SensorFactory.py:87
#, python-format
msgid "Could not load sensor '%(name)s'"
msgstr "Sensor '%(name)s' yüklənə bilmədi"

#: factory/SensorFactory.py:88
msgid ""
"An error occurred while loading a sensor. This most likely means that the "
"sensor is broken or simply not installed."
msgstr ""
"Sensor yüklənirkən xəta yarandı. Bunun səbəbi çox güman ki ya sensorun "
"xarab olduğu ya da heç qurulmamış olmasıdır."

#.
#. Class for creating Displays from XML data.
#.
#.
#. Parses the given XML data and returns a new Display object.
#.
#. parse display data
#. abort if an error occurred
#. add the sensors
#. add the DefaultSensor
#. we don't wanna override watch settings from the .display
#. add the children and configure
#. make the corrupt display visible so that the user can
#. remove it
#: factory/DisplayFactory.py:93
msgid "Error while configuring display"
msgstr "Displey quraşdırılırkən xəta xəta yarandı"

#: factory/DisplayFactory.py:94
msgid ""
"A display could not be configured properly. It will most likely be broken "
"and you should consider removing it."
msgstr ""
"Displey düzgün quraşdırıla bilmədi. Çox güman ki işləməyəcək. Sizə onu "
"silməyi məsləhət edirik."

#. end try
#.
#. Creates a TargetSettings object from the given Attributes object.
#.
#. if (key in ["uri", "bg-uri"]):
#. value = os.path.abspath(value)
#. end for
#. ignore the <meta> tag for now
#. if there is no ID given, guess a unique one
#. remember everything for later
#. nesting errors in XML are detected by the SAX parser; if we get
#. here, it means our parser is buggy, not the XML input
#. This class starts, restarts and kills Displays
#. the set of open displays as a hashtable "id -> display"
#. watches main/displays in the configuration base and calls on_watch if
#. something's changed
#. gets current displays from the configuration base
#. check whether there are already some displays; if there aren't any
#. welcome new users
#.
#. Welcomes new users and sets up the configuration base.
#.
#: main/Starter.py:45
#, python-format
msgid "Welcome to %(name)s<i>!</i>"
msgstr "%(name)s-ə Xoş Gəldiniz<i>!</i>"

#: main/Starter.py:46
#, python-format
msgid ""
"It looks like you are running %(name)s for the first time.\n"
"\n"
"You can add new displays by launching them in your file manager.\n"
"\n"
"<b>Have fun,</b>\n"
"  <i>the %(name)s developers</i>"
msgstr ""
"Deyəsən %(name)s proqramını ilk dəfə işə salırsınız.\n"
"\n"
"Yeni displeyləri fayl idarəçinizdə işə salaraq əlavə edə bilərsiniz.\n"
"\n"
"<b>Kef eləyin,</b>\n"
"  <i>%(name)s inkişafçıları və tərcüməçilər</i>"

#.
#. Reacts on observer messages from the display.
#.
#. end if
#.
#. Reacts on changes in the list of displays.
#.
#. check whether displays have been added
#. end for
#. check whether displays have been removed
#. end for
#.
#. Adds the given display.
#.
#. end if
#.
#. Creates and returns a new display from the given data, or None in case
#. of an error.
#.
#: main/Starter.py:125
#, python-format
msgid "Could not open display file '%(path)s'"
msgstr "'%(path)s' displey faylı açıla bilmədi"

#: main/Starter.py:127
msgid "The display file could not be opened because the file was not readable."
msgstr "Displey faylı oxuna bilən olmadığı üçün açıla bilmədi."

#: main/Starter.py:142
#, python-format
msgid "Invalid display file '%(path)s'"
msgstr "Hökmsüz displey cığırı '%(path)s' "

#: main/Starter.py:143
msgid "The display file contains invalid data and could not be loaded."
msgstr "Displey faylı hökmsüz mə'lumat daxil edir və buna görə də yüklənə bilmədi"

#.
#. Removes the given display.
#.
#.
#. Purges unused config entries.
#.
#. TODO: implement it in a more efficient way
#.
#. end for
#. end for
#.
#. Starts up all displays.
#.
#.
#. Abstract class for all Sensors. Every Sensor has to inherit from this class.
#.
#. the path of this sensor
#. configuration manager for sensor properties
#. the configuration watcher callback
#. flag for stopping the sensor
#. converter for data types
#.
#. Reacts on changes in the configuration and delegates the call to the
#. user's callback.
#.
#.
#. Returns the path of this sensor.
#.
#.
#. Returns a new empty TargetSettings object.
#.
#.
#. Sends the given TargetSettings object to the Display.
#.
#.
#. Adds a timeout function with the given interval in ms.
#. The callback function must return TRUE in order to be called again.
#.
#.
#. Adds and runs a new thread.
#.
#. the thread should not start before setup is complete, therefore
#. we are using the GTK idle handler
#.
#. Sends an action to this sensor.
#.
#.
#. Method for handling action calls from the display. Sensors have to
#. override this method.
#.
#.
#. Stops this sensor.
#.
#. shut down sensor
#.
#. Returns whether this sensor is stopped. Use this method to check if your
#. threads have to terminate.
#.
#.
#. Executes tasks for sensor shutdown. Sensors may override this method.
#.
#.
#. Sets the configuration id for this sensor. If the user has set a callback
#. function for watching the config, the config will be watched.
#.
#.
#. Returns the unique config ID of this sensor.
#.
#.
#. Registers a watcher for config changes.
#.
#.
#. Sets the data types to be used for the configuration values.
#.
#.
#. Creates and returns an empty new sensor configurator.
#.
#.
#. Returns the configurator of this sensor.
#.
#.
#. Opens the given menu.
#.
#: sensor/Sensor.py:250
msgid "_Configure display"
msgstr "Displeyi _quraşdır"

#: sensor/Sensor.py:251
msgid "Re_start display"
msgstr "Displeyi _yenidən başlat"

#: sensor/Sensor.py:252
msgid "_Remove display"
msgstr "Displeyi _sil"

#: sensor/Sensor.py:254
msgid "_About"
msgstr "_Haqqında"

#: sensor/Sensor.py:256
msgid "_Quit"
msgstr "Çı_x"

#: sensor/Sensor.py:288
msgid "translator_credits"
msgstr "Mətin Əmirov <metin@karegen.com>"

